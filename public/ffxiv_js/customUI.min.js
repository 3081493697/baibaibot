function accumAttrs(t, e, a, i, r) {
  for (var s = {
    auto_attack: 0,
    block_rate: 0,
    block_strength: 0,
    damage: 0,
    defense: 0,
    delay: 0,
    dps: 0,
    magic_damage: 0,
    magic_defense: 0
  }, n = new Array(74), l = 0; l < n.length; l++) n[l] = 0;
  for (var l in slotList) {
    var o = "#Slot" + slotList[l],
      m = $(o).attr("data-slotitemid");
    if ("0" != m) {
      var d = !1;
      "HQ" == m.substring(0, 2) && (d = !0, m = m.substring(2));
      for (x in s) s[x] += itemList[m].attributes_base[x + (d ? "_hq" : "")];
      var p = itemList[m].attributes_params;
      for (_ in p) {
        var c = p[_]["value" + (d ? "_hq" : "")];
        0 == c && (c = p[_].value), n[p[_].id] += c
      }
    }
  }
  var u = {
      STR: 0,
      DEX: 0,
      VIT: 0,
      INT: 0,
      MND: 0,
      PIE: 0,
      Fire: 0,
      Ice: 0,
      Wind: 0,
      Earth: 0,
      Lightning: 0,
      Water: 0,
      CriticalHit: 0,
      Determination: 0,
      DirectHitRate: 0,
      Defense: 0,
      Tenacity: 0,
      MagicDefense: 0,
      AttackPower: 0,
      SkillSpeed: 0,
      AttackMagicPotency: 0,
      HealingMagicPotency: 0,
      SpellSpeed: 0,
      Craftsmanship: 0,
      Control: 0,
      CP: 0,
      Gathering: 0,
      Perception: 0,
      GP: 0
    },
    v = ["STR", "DEX", "VIT", "INT", "MND"],
    b = ["Fire", "Ice", "Wind", "Earth", "Lightning", "Water"],
    g = ["Tenacity", "DirectHitRate", "CriticalHit"],
    h = ["SkillSpeed", "SpellSpeed"],
    S = ["Defense", "MagicDefense"],
    f = ["Craftsmanship", "Control", "Gathering", "Perception"];
  for (var l in traitsMap[t])
    if (traitsMap[t][l].level < e)
      for (var _ in v)
        if (v[_].toLowerCase() == traitsMap[t][l].attr) {
          n[L = Number(_) + 1] += traitsMap[t][l].value;
          break
        } for (var l in v) {
    var L = Number(l) + 1,
      I = Math.floor(statusAMap[e] * classAdjustMap[t][v[l].toLowerCase()]) + tribeAdjustMap[a][v[l].toLowerCase()] + n[L];
    r && (I = Math.floor(1.03 * I)), u[v[l]] = I, $("#Info" + v[l]).text(I.toString())
  }
  var L = 6,
    I = statusAMap[e] + n[L];
  u.PIE = I, $("#InfoPIE").text(I.toString());
  for (var l in b) {
    var L = Number(l) + 37,
      I = statusBMap[e] + n[L] + godAdjustMap[i][b[l].toLowerCase()];
    u[b[l]] = I, $("#Info" + b[l]).text(I.toString())
  }
  for (var l in g) {
    0 == Number(l) ? L = 19 : 1 == Number(l) ? L = 22 : 2 == Number(l) && (L = 27);
    I = statusCMap[e] + n[L];
    u[g[l]] = I, $("#Info" + g[l]).text(I.toString())
  }
  for (var l in h) {
    var L = Number(l) + 45,
      I = statusCMap[e] + n[L];
    u[h[l]] = I, $("#Info" + h[l]).text(I.toString())
  }
  for (var l in S) {
    I = 0;
    switch (S[l]) {
      case "Defense":
        I += s.defense;
        break;
      case "MagicDefense":
        I += s.magic_defense
    }
    u[S[l]] = I, $("#Info" + S[l]).text(I.toString())
  }
  for (var l in f) {
    I = n[L = Number(l) + 70];
    u[f[l]] = I, $("#Info" + f[l]).text(I.toString())
  }
  var L = 44,
    I = statusAMap[e] + n[L];
  u.Determination = I, $("#InfoDetermination").text(I.toString());
  I = 0;
  switch (t) {
    case "GLA":
    case "PLD":
    case "MRD":
    case "WAR":
    case "DRK":
      I = Math.floor(.45 * (u.STR + u.VIT));
      break;
    case "PGL":
    case "MNK":
    case "LNC":
    case "DRG":
    case "SAM":
      I = u.STR;
      break;
    case "ROG":
    case "NIN":
    case "ARC":
    case "BRD":
    case "MCH":
      I = u.DEX
  }
  u.AttackPower = I, $("#InfoAttackPower").text(I.toString());
  I = u.INT;
  u.AttackMagicPotency = I, $("#InfoAttackMagicPotency").text(I.toString());
  I = u.MND;
  u.HealingMagicPotency = I, $("#InfoHealingMagicPotency").text(I.toString());
  I = n[L = 11] + 180;
  u.CP = I, $("#InfoCP").text(I.toString());
  I = n[L = 10] + 400;
  u.GP = I, $("#InfoGP").text(I.toString());
  for (var l in slotList)
    for (_ = 1; _ <= 5; _++) {
      var M = "Socket" + slotList[l] + _.toString(),
        C = Number($("#" + M).attr("data-mattype")),
        D = Number($("#" + M).attr("data-matno"));
      C + D > 0 && (u[materiaText[C].paramid] += materiaValue[C][D], $("#Info" + materiaText[C].paramid).text(u[materiaText[C].paramid].toString()))
    }
}

function computePerformance(t, e) {
  var a = itemList[t];
  slotSetList[e].itemList[t].ready = !0;
  var i = 0,
    r = 0,
    s = classjobWeight[classjob].attributes_base;
  for (var n in s)
    for (var l in s[n]) a.can_be_hq && (r += s[n][l] * a.attributes_base[l + "_hq"]), i += s[n][l] * a.attributes_base[l];
  var o = classjobWeight[classjob].attributes_params;
  for (var n in o)
    for (var l in o[n])
      for (var m in a.attributes_params)
        if (a.attributes_params[m].name == l) {
          a.can_be_hq && (r += o[n][l] * a.attributes_params[m].value_hq), i += o[n][l] * a.attributes_params[m].value;
          break
        } slotSetList[e].itemList[t].performance = i.toFixed(2), a.can_be_hq && (slotSetList[e].itemList[t].performance_hq = r.toFixed(2))
}

function fetchDB(t, e, a) {
  nRequestBudget <= 0 ? window.setTimeout(function() {
    fetchDB(t, e, a)
  }, 1200) : (nRequestBudget--, $.getJSON(t, function(t) {
    itemList[t.id.toString()] = t, slotSetList[e].itemNum--, 0 == slotSetList[e].itemNum && a.resolve(e)
  }).done(function(t) {
    console.log("getJSON:success");
    var itemid = t.id;
    var cnname = cnarr[itemid];
    t.name_cns=cnname;
    t.id.toString()
  }).fail(function(i, r, s) {
    var n = r + ", " + s;
    console.log("getJSON request failed: " + n), bAlertFirst && (alert("从数据库获取一条装备信息时失败，将自动重试。但若长时间（10分钟）Loading画面依旧未停止，可能是由于您的网络连接异常导致始终无法获取数据库信息……请刷新页面后重试。"), bAlertFirst = !1), window.setTimeout(function() {
      console.log("fetch again: " + t + " " + e), fetchDB(t, e, a)
    }, 3e3)
  }).always(function() {}))
}

function slowFetchDB(t, e, a) {
  console.log("to fetch id: " + t);
  fetchDBCount++, fetchDB("http://api.xivdb.com/item/" + t, e, a), console.log("dbCount: ", fetchDBCount.toString())
}

function setGearILv(t, e, a, i, r, s) {
  slotSetList[r].bNewItem = !1, slotSetList[r].itemNum = 0, slotSetList[r].itemList = {};
  var n = $.Deferred();
  if ("SoulCrystal" == r) {
    p = JSON.parse(store.get("soulCrystal"));
    for (var l in p)
      for (var o in slotCategories[r])
        for (var m in classjobWear[a])
          if (slotCategories[r][o] > 0 && classjobWear[a][m] > 0 && p[l].equip_slot_category == slotCategories[r][o] && p[l].classjob_category == classjobWear[a][m]) {
            c = p[l].id.toString();
            slotSetList[r].itemList[c] = {
              ready: !1,
              performance: 0,
              performance_hq: 0
            }, slotSetList[r].itemNum++
          }
  } else
    for (var d in s)
      if (s[d] > 0) {
        if (t <= s[d]) {
          var p = JSON.parse(store.get("gearILv" + s[d].toString()));
          for (var l in p)
            if (p[l].patch <= patchCurr && p[l].level_equip <= i && p[l].level_item >= t && p[l].level_item <= e)
              for (var o in slotCategories[r])
                for (var m in classjobWear[a])
                  if (slotCategories[r][o] > 0 && classjobWear[a][m] > 0 && p[l].equip_slot_category == slotCategories[r][o] && p[l].classjob_category == classjobWear[a][m]) {
                    var c = p[l].id.toString();
                    slotSetList[r].itemList[c] = {
                      ready: !1,
                      performance: 0,
                      performance_hq: 0
                    }, slotSetList[r].itemNum++
                  }
        }
        if (e <= s[d]) break
      } for (var u in slotSetList[r].itemList) null != itemList[u] && slotSetList[r].itemNum--;
  if (slotSetList[r].itemNum > 0) {
    fetchDBCount = 0;
    for (var u in slotSetList[r].itemList) null == itemList[u] && slowFetchDB(u, r, n)
  } else n.resolve(r);
  return n.promise()
}

function sortSlotItems(t, e) {
  for (var a in slotSetList[t].itemList) computePerformance(a, t);
  var i = new Array,
    r = 0;
  for (var a in slotSetList[t].itemList) console.log("now process:" + a), itemList[a].can_be_hq && (i[r++] = {
    id: a,
    bHQ: !0,
    performance: slotSetList[t].itemList[a].performance_hq
  }), i[r++] = {
    id: a,
    bHQ: !1,
    performance: slotSetList[t].itemList[a].performance
  };
  itemsSorted = i.sort(function(t, e, a) {
    return a ? e.performance - t.performance : t.performance - e.performance
  });
  for (var r in itemsSorted) {
    var s = itemsSorted[r].id,
      n = itemList[s],
      l = n.name_cns ? n.name_cns : n["name_" + secondLang];
    switch (n.rarity) {
      case 1:
        l = '<span class="rarity_white">' + l + "</span>";
        break;
      case 2:
        l = '<span class="rarity_green">' + l + "</span>";
        break;
      case 3:
        l = '<span class="rarity_blue">' + l + "</span>";
        break;
      case 4:
        l = '<span class="rarity_purple">' + l + "</span>";
        break;
      case 7:
        l = '<span class="rarity_pink">' + l + "</span>"
    }
    itemsSorted[r].bHQ && (l += '<img src="/Content/Images/hq.png" draggable="false"/>');
    var o = n.lodestone_id;
    "" == o && (o = lodestoneId[n.id.toString()]);
    var m = "[iLv." + n.level_item.toString() + "] ",
      d = " (PFM +" + itemsSorted[r].performance.toString() + ")";
    if (itemsSorted[r].bHQ)
      if ("Ring" == t) {
        p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="' + s + '" data-slot="Left' + t + '" data-href="' + itemUrlPrefix + o + '/" data-hq="true" class="eorzeadb_link">' + m + l + d + "</a></li>";
        $("#AlterHeaderLeft" + t).after(p), p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="' + s + '" data-slot="Right' + t + '" data-href="' + itemUrlPrefix + o + '/" data-hq="true" class="eorzeadb_link">' + m + l + d + "</a></li>", $("#AlterHeaderRight" + t).after(p)
      } else {
        p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="' + s + '" data-slot="' + t + '" data-href="' + itemUrlPrefix + o + '/" data-hq="true" class="eorzeadb_link">' + m + l + d + "</a></li>";
        $("#AlterHeader" + t).after(p)
      }
    else if ("Ring" == t) {
      p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="' + s + '" data-slot="Left' + t + '" data-href="' + itemUrlPrefix + o + '/" data-hq="false" class="eorzeadb_link">' + m + l + d + "</a></li>";
      $("#AlterHeaderLeft" + t).after(p), p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="' + s + '" data-slot="Right' + t + '" data-href="' + itemUrlPrefix + o + '/" data-hq="false" class="eorzeadb_link">' + m + l + d + "</a></li>", $("#AlterHeaderRight" + t).after(p)
    } else {
      p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="' + s + '" data-slot="' + t + '" data-href="' + itemUrlPrefix + o + '/" data-hq="false" class="eorzeadb_link">' + m + l + d + "</a></li>";
      $("#AlterHeader" + t).after(p)
    }
    if (0 == slotSetList[t].bNewItem)
      if (slotSetList[t].bNewItem = !0, "Ring" == t) {
        p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="0" data-slot="Left' + t + '">卸下</a></li>';
        $("#SeperatorLeft" + t).before(p), p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="0" data-slot="Right' + t + '">卸下</a></li>', $("#SeperatorRight" + t).before(p)
      } else {
        var p = '<li><a href="javascritp:void(0);" onclick="return false;"" data-itemid="0" data-slot="' + t + '">卸下</a></li>';
        $("#Seperator" + t).before(p)
      }
  }
}

function setGearILvAll(t, e, a, i, r) {
  var s = $.Deferred();
  return clearAllSlots(), $("[data-itemid]").remove(), bAlertFirst = !0, $.when(setGearILv(t, e, a, i, "MainHand", r), setGearILv(t, e, a, i, "Head", r), setGearILv(t, e, a, i, "Body", r), setGearILv(t, e, a, i, "Hands", r), setGearILv(t, e, a, i, "Waist", r), setGearILv(t, e, a, i, "Legs", r), setGearILv(t, e, a, i, "Feet", r), setGearILv(t, e, a, i, "SecondaryHand", r), setGearILv(t, e, a, i, "Necklace", r), setGearILv(t, e, a, i, "Earings", r), setGearILv(t, e, a, i, "Bracelets", r), setGearILv(t, e, a, i, "Ring", r), setGearILv(t, e, a, i, "SoulCrystal", r)).done(function() {
    sortSlotItems("MainHand", "performance"), sortSlotItems("Head", "performance"), sortSlotItems("Body", "performance"), sortSlotItems("Hands", "performance"), sortSlotItems("Waist", "performance"), sortSlotItems("Legs", "performance"), sortSlotItems("Feet", "performance"), sortSlotItems("SecondaryHand", "performance"), sortSlotItems("Necklace", "performance"), sortSlotItems("Earings", "performance"), sortSlotItems("Bracelets", "performance"), sortSlotItems("Ring", "performance"), sortSlotItems("SoulCrystal", "performance"), eorzeadb.init_db_links(jQuery), s.resolve()
  }), s.promise()
}

function storeILvData() {
  var t;
  $.ajaxSettings.async = !1, $.getJSON("/Data/EquipmentILV/verGearILv.json", function(e) {
    t = e.verGear, iLvSep = e.ilvSep
  }).done(function(t) {
    console.log("getJSON:success")
  }).fail(function(t, e, a) {
    var i = e + ", " + a;
    console.log("getJSON request failed: " + i), alert("获取服务器版本信息失败，可能服务器繁忙，请稍候刷新页面再试。")
  }).always(function() {
    console.log("getJSON:complete")
  }), $.ajaxSettings.async = !0;
  var e = store.get("verGearILv");
  (void 0 === e || Number(e) < Number(t)) && ($("#ModalLoading").modal("show"), $.when().done(function() {
    $.when(storeGearData("/Data/EquipmentILV/" + iLvSep[1].toString() + ".json", "gearILv" + iLvSep[1].toString()), storeGearData("/Data/EquipmentILV/" + iLvSep[2].toString() + ".json", "gearILv" + iLvSep[2].toString()), storeGearData("/Data/EquipmentILV/" + iLvSep[3].toString() + ".json", "gearILv" + iLvSep[3].toString()), storeGearData("/Data/EquipmentILV/" + iLvSep[4].toString() + ".json", "gearILv" + iLvSep[4].toString()), storeGearData("/Data/EquipmentILV/" + iLvSep[5].toString() + ".json", "gearILv" + iLvSep[5].toString()), storeGearData("/Data/EquipmentILV/" + iLvSep[6].toString() + ".json", "gearILv" + iLvSep[6].toString()), storeGearData("/Data/EquipmentILV/soulcrystal.json", "soulCrystal"), storeGearData("/Data/EquipmentILV/ldst.json", "lodestoneId_bak")).done(function() {
      store.set("verGearILv", t), $("#ModalLoading").modal("hide")
    }).fail(function() {
      alert("获取服务器装备索引失败，可能服务器繁忙，请稍候刷新页面再试。PS：Loading界面不会消失，请勿等待 ;)")
    })
  }))
}

function storeGearData(t, e) {
  var a = $.Deferred();
  return $.getJSON(t, function(t) {
    store.set(e, JSON.stringify(t)), console.log("JSON file has been stored as " + e + "."), a.resolve()
  }).done(function(t) {
    console.log("getJSON:success")
  }).fail(function(t, e, i) {
    var r = e + ", " + i;
    console.log("getJSON request failed: " + r), a.reject()
  }).always(function() {
    console.log("getJSON:complete")
  }), a.promise()
}

function addBudget() {
  nRequestBudget = 5, window.setTimeout(addBudget, 1100)
}

function initSetting() {
  storeILvData(), lodestoneId = JSON.parse(store.get("lodestoneId_bak"));
  for (var t in slotList)
    for (var e = 1; e <= 5; e++) {
      var a = "#Socket" + slotList[t] + e.toString();
      $(a).hide()
    }
  nRequestBudget = 0, addBudget();
  var i;
  guardian = store.get("guardian"), guardian = void 0 === guardian ? "Halone" : guardian, i = $("#SelectGuardian").val(), $("#SelectGuardian").find("[value='" + guardian + "']").attr("selected", ""), $("#SelectGuardian").find("[value='" + i + "']").removeAttr("selected"), tribe = store.get("tribe"), tribe = void 0 === tribe ? "Hyur_Midlanders" : tribe, i = $("#SelectTribe").val(), $("#SelectTribe").find("[value='" + tribe + "']").attr("selected", ""), $("#SelectTribe").find("[value='" + i + "']").removeAttr("selected"), classjob = store.get("classjob"), classjob = void 0 === classjob ? "PLD" : classjob, i = $("#SelectClassJob").val(), $("#SelectClassJob").find("[value='" + classjob + "']").attr("selected", ""), $("#SelectClassJob").find("[value='" + i + "']").removeAttr("selected"), classjobLvStr = store.get("classjoblv"), classjobLvStr = "undefined" == typeof classjobLvStr ? "70" : classjobLvStr, $("#InputLv")[0].value = classjobLvStr, classjobLv = Number(classjobLvStr), minILvStr = store.get("minilv"), minILvStr = "undefined" == typeof minILvStr ? "340" : minILvStr, $("#InputILvMin")[0].value = minILvStr, minILv = Number(minILvStr), maxILvStr = store.get("maxilv"), maxILvStr = "undefined" == typeof maxILvStr ? "380" : maxILvStr, $("#InputILvMax")[0].value = maxILvStr, maxILv = Number(maxILvStr), accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus), secondLang = store.get("secondlang"), secondLang = void 0 === secondLang ? "en" : secondLang, i = $("#SelectSecondLang").val(), $("#SelectSecondLang").find("[value='" + secondLang + "']").attr("selected", ""), $("#SelectSecondLang").find("[value='" + i + "']").removeAttr("selected"), patchCurr = store.get("patchCurr"), patchCurr = void 0 === patchCurr ? 43 : patchCurr, i = $("#SelectPatch").val(), $("#SelectPatch").find("[value='" + patchCurr + "']").attr("selected", ""), $("#SelectPatch").find("[value='" + i + "']").removeAttr("selected")
}

function clearAllSlots() {
  for (var t in slotList) {
    var e = slotList[t];
    $("#Slot" + e).text("...").attr({
      "data-slotitemid": "0",
      style: "width:250px; text-align:left;"
    }), $("#Img" + e).attr({
      src: "/Content/Images/equip_empty.png",
      style: "width:60px;height:60px;",
      class: "img-rounded"
    }).removeAttr("data-href");
    for (var a = 1; a <= 5; a++) {
      var i = "#Socket" + e + a.toString();
      $(i).hide()
    }
  }
  accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus)
}
var iLvSep, classjob, guardian, tribe, nRequestBudget, bAlertFirst, lodestoneId, slotCategories = {
    MainHand: [0, 1, 13],
    Head: [0, 3],
    Body: [0, 4, 15, 16, 19, 20, 21],
    Hands: [0, 5],
    Waist: [0, 6],
    Legs: [0, 7, 18],
    Feet: [0, 8],
    Earings: [0, 9],
    Necklace: [0, 10],
    Bracelets: [0, 11],
    SecondaryHand: [0, 2],
    Ring: [0, 12],
    LeftRing: [0, 12],
    RightRing: [0, 12],
    SoulCrystal: [0, 17]
  },
  classjobUse = {
    GLA: [0, 1],
    PGL: [0, 2],
    MRD: [0, 3],
    LNC: [0, 4],
    ARC: [0, 5],
    CNJ: [0, 6],
    THM: [0, 7],
    ACN: [0, 26],
    CRP: [0, 8],
    BSM: [0, 9],
    ARM: [0, 10],
    GSM: [0, 11],
    LTW: [0, 12],
    WVR: [0, 13],
    ALC: [0, 14],
    CUL: [0, 15],
    MIN: [0, 16],
    BTN: [0, 17],
    FSH: [0, 18],
    PLD: [0, 1, 19],
    MNK: [0, 2, 20],
    WAR: [0, 3, 21],
    DRG: [0, 4, 22],
    BRD: [0, 5, 23],
    WHM: [0, 6, 24],
    BLM: [0, 7, 25],
    SMN: [0, 26, 27],
    SCH: [0, 26, 28],
    ROG: [0, 29],
    NIN: [0, 29, 30],
    MCH: [0, 31],
    DRK: [0, 32],
    AST: [0, 33],
    SAM: [0, 34],
    RDM: [0, 35]
  },
  classjobWear = {
    GLA: [0, 1, 34, 30, 38, 56, 57, 58, 59, 60],
    PGL: [0, 1, 34, 30, 41, 65, 84, 102],
    MRD: [0, 1, 34, 30, 44, 59, 60],
    LNC: [0, 1, 34, 30, 47, 60, 84],
    ARC: [0, 1, 34, 30, 50, 66, 105],
    CNJ: [0, 1, 34, 31, 53, 56, 58, 64],
    THM: [0, 1, 34, 31, 55, 56, 57, 63],
    ACN: [0, 1, 34, 31, 63, 68, 69],
    CRP: [0, 1, 33, 9],
    BSM: [0, 1, 33, 10],
    ARM: [0, 1, 33, 11],
    GSM: [0, 1, 33, 12],
    LTW: [0, 1, 33, 13],
    WVR: [0, 1, 33, 14],
    ALC: [0, 1, 33, 15],
    CUL: [0, 1, 33, 16],
    MIN: [0, 1, 32, 17],
    BTN: [0, 1, 32, 18],
    FSH: [0, 1, 32, 19],
    PLD: [0, 1, 34, 30, 20, 38, 26, 57, 58, 59, 60],
    MNK: [0, 1, 34, 30, 21, 41, 65, 84, 102],
    WAR: [0, 1, 34, 30, 22, 44, 59, 60],
    DRG: [0, 1, 34, 30, 23, 47, 60, 84],
    BRD: [0, 1, 34, 30, 24, 50, 66, 105],
    WHM: [0, 1, 34, 31, 25, 53, 56, 58, 64],
    BLM: [0, 1, 34, 31, 26, 55, 56, 57, 63],
    SMN: [0, 1, 34, 31, 28, 63, 68, 69],
    SCH: [0, 1, 34, 31, 29, 64, 68],
    ROG: [0, 1, 34, 30, 93, 102, 103, 105],
    NIN: [0, 1, 34, 30, 92, 93, 102, 103, 105],
    MCH: [0, 1, 34, 30, 66, 96, 105],
    DRK: [0, 1, 34, 30, 59, 60, 98],
    AST: [0, 1, 34, 31, 64, 99],
    SAM: [0, 1, 34, 30, 65, 84, 102, 111],
    RDM: [0, 1, 34, 31, 63, 112]
  },
  itemList = {},
  iconUrlPrefix = "http://img.finalfantasyxiv.com/lds/pc/global/images/itemicon/",
  itemUrlPrefix = "http://na.finalfantasyxiv.com/lodestone/playguide/db/item/",
  slotSetList = {
    MainHand: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Head: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Body: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Hands: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Waist: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Legs: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Feet: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Earings: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Necklace: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Bracelets: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    SecondaryHand: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    Ring: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    },
    SoulCrystal: {
      bNewItem: !1,
      itemNum: 0,
      itemList: {}
    }
  },
  slotList = ["MainHand", "Head", "Body", "Hands", "Waist", "Legs", "Feet", "SecondaryHand", "Earings", "Necklace", "Bracelets", "LeftRing", "RightRing", "SoulCrystal"],
  godAdjustMap = {
    Halone: {
      fire: 0,
      ice: 4,
      wind: 3,
      earth: 2,
      lightning: 2,
      water: 2
    },
    Menphina: {
      fire: 0,
      ice: 4,
      wind: 3,
      earth: 2,
      lightning: 2,
      water: 2
    },
    Thaliak: {
      fire: 2,
      ice: 2,
      wind: 2,
      earth: 3,
      lightning: 0,
      water: 4
    },
    Nymeia: {
      fire: 2,
      ice: 2,
      wind: 2,
      earth: 3,
      lightning: 0,
      water: 4
    },
    Llymlaen: {
      fire: 3,
      ice: 0,
      wind: 4,
      earth: 2,
      lightning: 2,
      water: 2
    },
    Oschon: {
      fire: 3,
      ice: 0,
      wind: 4,
      earth: 2,
      lightning: 2,
      water: 2
    },
    Byregot: {
      fire: 2,
      ice: 2,
      wind: 2,
      earth: 0,
      lightning: 4,
      water: 3
    },
    Rhalgr: {
      fire: 2,
      ice: 2,
      wind: 2,
      earth: 0,
      lightning: 4,
      water: 3
    },
    Azeyma: {
      fire: 4,
      ice: 3,
      wind: 0,
      earth: 2,
      lightning: 2,
      water: 2
    },
    Naldthal: {
      fire: 4,
      ice: 3,
      wind: 0,
      earth: 2,
      lightning: 2,
      water: 2
    },
    Nophica: {
      fire: 2,
      ice: 2,
      wind: 2,
      earth: 4,
      lightning: 3,
      water: 0
    },
    Althyk: {
      fire: 2,
      ice: 2,
      wind: 2,
      earth: 4,
      lightning: 3,
      water: 0
    }
  },
  tribeAdjustMap = {
    Hyur_Midlanders: {
      str: 2,
      dex: -1,
      vit: 0,
      int: 3,
      mnd: -1
    },
    Hyur_Highlanders: {
      str: 3,
      dex: 0,
      vit: 2,
      int: -2,
      mnd: 0
    },
    Elezen_Wildwood: {
      str: 0,
      dex: 3,
      vit: -1,
      int: 2,
      mnd: -1
    },
    Elezen_Duskwight: {
      str: 0,
      dex: 0,
      vit: -1,
      int: 3,
      mnd: 1
    },
    Lalafell_Plainsfolk: {
      str: -1,
      dex: 3,
      vit: -1,
      int: 2,
      mnd: 0
    },
    Lalafell_Dunesfolk: {
      str: -1,
      dex: 1,
      vit: -2,
      int: 2,
      mnd: 3
    },
    Miqote_SeekersoftheSun: {
      str: 2,
      dex: 3,
      vit: 0,
      int: -1,
      mnd: -1
    },
    Miqote_KeepersoftheMoon: {
      str: -1,
      dex: 1,
      vit: -2,
      int: 1,
      mnd: 3
    },
    Roegadyn_SeaWolves: {
      str: 2,
      dex: -1,
      vit: 3,
      int: -2,
      mnd: 1
    },
    Roegadyn_Hellsguard: {
      str: 0,
      dex: -2,
      vit: 3,
      int: 0,
      mnd: 2
    },
    AuRa_Raen: {
      str: -1,
      dex: 2,
      vit: -1,
      int: 0,
      mnd: 3
    },
    AuRa_Xaela: {
      str: 3,
      dex: 0,
      vit: 2,
      int: 0,
      mnd: -2
    }
  },
  classAdjustMap = {
    PLD: {
      str: 1,
      dex: .95,
      vit: 1.1,
      int: .6,
      mnd: 1,
      pie: .85,
      base_hp: 3600,
      hp: 1.2,
      mp_pie: 3.205,
      base_mp: 7080
    },
    GLA: {
      str: .95,
      dex: .9,
      vit: 1,
      int: .5,
      mnd: .95,
      pie: .8,
      base_hp: 3600,
      hp: 1.1,
      mp_pie: 3.205,
      base_mp: 7080
    },
    WAR: {
      str: 1.05,
      dex: .95,
      vit: 1.1,
      int: .4,
      mnd: .55,
      pie: .45,
      base_hp: 3600,
      hp: 1.25,
      mp_pie: 2.15,
      base_mp: 4560
    },
    MRD: {
      str: 1,
      dex: .9,
      vit: 1,
      int: .3,
      mnd: .5,
      pie: .4,
      base_hp: 3600,
      hp: 1.15,
      mp_pie: 2.15,
      base_mp: 4560
    },
    DRK: {
      str: 1.05,
      dex: .95,
      vit: 1.1,
      int: .6,
      mnd: .4,
      pie: .4,
      base_hp: 3600,
      hp: 1.2,
      mp_pie: 4.275,
      base_mp: 9480
    },
    MNK: {
      str: 1.1,
      dex: 1.05,
      vit: 1,
      int: .5,
      mnd: .9,
      pie: .65,
      base_hp: 3600,
      hp: 1.1,
      mp_pie: 2.413,
      base_mp: 5160
    },
    PGL: {
      str: 1,
      dex: 1,
      vit: .95,
      int: .45,
      mnd: .85,
      pie: .6,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 2.413,
      base_mp: 5160
    },
    DRG: {
      str: 1.15,
      dex: 1,
      vit: 1.05,
      int: .45,
      mnd: .65,
      pie: .75,
      base_hp: 3600,
      hp: 1.15,
      mp_pie: 2.675,
      base_mp: 5880
    },
    LNC: {
      str: 1.05,
      dex: .95,
      vit: 1,
      int: .4,
      mnd: .6,
      pie: .7,
      base_hp: 3600,
      hp: 1.1,
      mp_pie: 2.675,
      base_mp: 5880
    },
    SAM: {
      str: 1.1,
      dex: 1.05,
      vit: 1,
      int: .5,
      mnd: .9,
      pie: .65,
      base_hp: 3600,
      hp: 1.09,
      mp_pie: 2.413,
      base_mp: 4800
    },
    NIN: {
      str: .85,
      dex: 1.1,
      vit: 1,
      int: .65,
      mnd: .75,
      pie: .65,
      base_hp: 3600,
      hp: 1.08,
      mp_pie: 2.682,
      base_mp: 5760
    },
    ROG: {
      str: .8,
      dex: 1,
      vit: .95,
      int: .6,
      mnd: .7,
      pie: .6,
      base_hp: 3600,
      hp: 1.03,
      mp_pie: 2.682,
      base_mp: 5760
    },
    BRD: {
      str: .9,
      dex: 1.15,
      vit: 1,
      int: .85,
      mnd: .8,
      pie: .85,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 4.28,
      base_mp: 9480
    },
    ARC: {
      str: .85,
      dex: 1.05,
      vit: .95,
      int: .8,
      mnd: .75,
      pie: .8,
      base_hp: 3600,
      hp: 1,
      mp_pie: 4.28,
      base_mp: 9480
    },
    MCH: {
      str: .85,
      dex: 1.15,
      vit: 1,
      int: .8,
      mnd: .85,
      pie: .85,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 4.28,
      base_mp: 9480
    },
    BLM: {
      str: .45,
      dex: 1,
      vit: 1,
      int: 1.15,
      mnd: .75,
      pie: 1.2,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 6.735,
      base_mp: 15480
    },
    THM: {
      str: .4,
      dex: .95,
      vit: .95,
      int: 1.05,
      mnd: .7,
      pie: 1.15,
      base_hp: 3600,
      hp: 1,
      mp_pie: 6.735,
      base_mp: 15480
    },
    SMN: {
      str: .9,
      dex: 1,
      vit: 1,
      int: 1.15,
      mnd: .8,
      pie: 1.05,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 5.93,
      base_mp: 13320
    },
    ACN: {
      str: .85,
      dex: .95,
      vit: .95,
      int: 1.05,
      mnd: .75,
      pie: 1,
      base_hp: 3600,
      hp: 1,
      mp_pie: 5.93,
      base_mp: 13320
    },
    RDM: {
      str: .45,
      dex: 1,
      vit: 1,
      int: 1.15,
      mnd: .75,
      pie: 1.2,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 6.735,
      base_mp: 14400
    },
    WHM: {
      str: .55,
      dex: 1.05,
      vit: 1,
      int: 1.05,
      mnd: 1.15,
      pie: 1.2,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 3.4286,
      base_mp: 14880
    },
    CNJ: {
      str: .5,
      dex: 1,
      vit: .95,
      int: 1,
      mnd: 1.05,
      pie: 1.1,
      base_hp: 3600,
      hp: 1,
      mp_pie: 3.4286,
      base_mp: 14880
    },
    SCH: {
      str: .9,
      dex: 1,
      vit: 1,
      int: 1.05,
      mnd: 1.15,
      pie: 1.2,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 3.29,
      base_mp: 14280
    },
    AST: {
      str: .5,
      dex: 1,
      vit: 1,
      int: 1.05,
      mnd: 1.15,
      pie: 1.2,
      base_hp: 3600,
      hp: 1.05,
      mp_pie: 3.4286,
      base_mp: 14880
    },
    CRP: {
      str: .9,
      dex: 1,
      vit: 1.05,
      int: .9,
      mnd: .9,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    BSM: {
      str: 1.05,
      dex: .9,
      vit: .9,
      int: .9,
      mnd: 1,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    ARM: {
      str: 1,
      dex: .9,
      vit: 1.05,
      int: .9,
      mnd: .9,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    GSM: {
      str: .9,
      dex: 1.05,
      vit: .9,
      int: 1,
      mnd: .9,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    LTW: {
      str: .9,
      dex: .9,
      vit: 1.05,
      int: 1,
      mnd: .9,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    WVR: {
      str: .9,
      dex: 1.05,
      vit: .9,
      int: .9,
      mnd: 1,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    ALC: {
      str: .9,
      dex: .9,
      vit: .9,
      int: 1.05,
      mnd: .9,
      pie: 1,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    CUL: {
      str: .9,
      dex: .9,
      vit: .9,
      int: .9,
      mnd: 1.05,
      pie: 1,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    MIN: {
      str: 1,
      dex: .9,
      vit: .9,
      int: .9,
      mnd: 1,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    BTN: {
      str: .9,
      dex: 1,
      vit: .9,
      int: 1,
      mnd: .9,
      pie: .9,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    },
    FSH: {
      str: 1,
      dex: 1,
      vit: 1,
      int: 1,
      mnd: 1,
      pie: 1,
      base_hp: 3600,
      hp: 1,
      mp_pie: 0,
      base_mp: 0
    }
  },
  statusAMap = [0, 20, 21, 22, 24, 26, 27, 29, 31, 33, 35, 36, 38, 41, 45, 46, 49, 52, 54, 57, 60, 64, 67, 71, 74, 78, 81, 85, 91, 92, 97, 102, 106, 110, 115, 119, 124, 128, 134, 139, 144, 150, 155, 161, 166, 171, 177, 183, 189, 196, 202, 204, 205, 207, 209, 210, 212, 214, 215, 217, 218, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292],
  statusBMap = [0, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 73, 76, 79, 82, 84, 87, 91, 93, 96, 100, 103, 107, 111, 115, 119, 123, 127, 131, 135, 141, 146, 151, 157, 163, 168, 174, 179, 184, 190, 198, 205, 213, 221, 229, 236, 244, 252, 259, 267, 268, 269, 271, 272, 273, 274, 276, 277, 278, 280, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293],
  statusCMap = [0, 56, 57, 60, 62, 65, 68, 70, 73, 76, 78, 82, 85, 89, 93, 96, 100, 104, 109, 113, 117, 122, 127, 133, 138, 144, 150, 155, 162, 168, 173, 181, 188, 194, 202, 209, 215, 223, 229, 236, 244, 253, 263, 272, 283, 292, 302, 311, 322, 331, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364],
  traitsMap = {
    PLD: [{
      level: 8,
      attr: "vit",
      value: 8
    }, {
      level: 16,
      attr: "vit",
      value: 16
    }, {
      level: 24,
      attr: "vit",
      value: 24
    }],
    GLA: [{
      level: 8,
      attr: "vit",
      value: 8
    }, {
      level: 16,
      attr: "vit",
      value: 16
    }, {
      level: 24,
      attr: "vit",
      value: 24
    }],
    WAR: [{
      level: 8,
      attr: "vit",
      value: 8
    }, {
      level: 16,
      attr: "vit",
      value: 16
    }, {
      level: 24,
      attr: "vit",
      value: 24
    }],
    MRD: [{
      level: 8,
      attr: "vit",
      value: 8
    }, {
      level: 16,
      attr: "vit",
      value: 16
    }, {
      level: 24,
      attr: "vit",
      value: 24
    }],
    DRK: [{
      level: 8,
      attr: "vit",
      value: 8
    }, {
      level: 16,
      attr: "vit",
      value: 16
    }, {
      level: 24,
      attr: "vit",
      value: 24
    }],
    MNK: [{
      level: 8,
      attr: "str",
      value: 8
    }, {
      level: 16,
      attr: "str",
      value: 16
    }, {
      level: 24,
      attr: "str",
      value: 24
    }],
    PGL: [{
      level: 8,
      attr: "str",
      value: 8
    }, {
      level: 16,
      attr: "str",
      value: 16
    }, {
      level: 24,
      attr: "str",
      value: 24
    }],
    DRG: [{
      level: 8,
      attr: "str",
      value: 8
    }, {
      level: 16,
      attr: "str",
      value: 16
    }, {
      level: 24,
      attr: "str",
      value: 24
    }],
    LNC: [{
      level: 8,
      attr: "str",
      value: 8
    }, {
      level: 16,
      attr: "str",
      value: 16
    }, {
      level: 24,
      attr: "str",
      value: 24
    }],
    SAM: [{
      level: 8,
      attr: "str",
      value: 8
    }, {
      level: 16,
      attr: "str",
      value: 16
    }, {
      level: 24,
      attr: "str",
      value: 24
    }],
    NIN: [{
      level: 14,
      attr: "dex",
      value: 8
    }, {
      level: 16,
      attr: "dex",
      value: 16
    }, {
      level: 32,
      attr: "dex",
      value: 24
    }],
    ROG: [{
      level: 14,
      attr: "dex",
      value: 8
    }, {
      level: 16,
      attr: "dex",
      value: 16
    }, {
      level: 32,
      attr: "dex",
      value: 24
    }],
    BRD: [{
      level: 14,
      attr: "dex",
      value: 8
    }, {
      level: 16,
      attr: "dex",
      value: 16
    }, {
      level: 32,
      attr: "dex",
      value: 24
    }],
    ARC: [{
      level: 14,
      attr: "dex",
      value: 8
    }, {
      level: 16,
      attr: "dex",
      value: 16
    }, {
      level: 32,
      attr: "dex",
      value: 24
    }],
    MCH: [{
      level: 8,
      attr: "dex",
      value: 8
    }, {
      level: 16,
      attr: "dex",
      value: 16
    }, {
      level: 24,
      attr: "dex",
      value: 24
    }],
    BLM: [{
      level: 8,
      attr: "int",
      value: 8
    }, {
      level: 16,
      attr: "int",
      value: 16
    }, {
      level: 24,
      attr: "int",
      value: 24
    }],
    THM: [{
      level: 8,
      attr: "int",
      value: 8
    }, {
      level: 16,
      attr: "int",
      value: 16
    }, {
      level: 24,
      attr: "int",
      value: 24
    }],
    SMN: [{
      level: 14,
      attr: "int",
      value: 8
    }, {
      level: 16,
      attr: "int",
      value: 16
    }, {
      level: 32,
      attr: "int",
      value: 24
    }],
    ACN: [{
      level: 14,
      attr: "int",
      value: 8
    }, {
      level: 16,
      attr: "int",
      value: 16
    }, {
      level: 32,
      attr: "int",
      value: 24
    }],
    RDM: [{
      level: 8,
      attr: "int",
      value: 8
    }, {
      level: 16,
      attr: "int",
      value: 16
    }, {
      level: 24,
      attr: "int",
      value: 24
    }],
    WHM: [{
      level: 8,
      attr: "mnd",
      value: 8
    }, {
      level: 16,
      attr: "mnd",
      value: 16
    }, {
      level: 24,
      attr: "mnd",
      value: 24
    }],
    CNJ: [{
      level: 8,
      attr: "mnd",
      value: 8
    }, {
      level: 16,
      attr: "mnd",
      value: 16
    }, {
      level: 24,
      attr: "mnd",
      value: 24
    }],
    SCH: [{
      level: 14,
      attr: "int",
      value: 8
    }, {
      level: 16,
      attr: "int",
      value: 16
    }, {
      level: 32,
      attr: "int",
      value: 24
    }],
    AST: [{
      level: 8,
      attr: "mnd",
      value: 8
    }, {
      level: 14,
      attr: "mnd",
      value: 16
    }, {
      level: 24,
      attr: "mnd",
      value: 24
    }]
  },
  extraPoints = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35],
  classjobWeight = {
    PLD: {
      attributes_base: [{
        damage: 26.523
      }],
      attributes_params: [{
        Vitality: .9
      }, {
        Strength: 1
      }, {
        Determination: .396
      }, {
        "Critical Hit": .541
      }, {
        "Skill Speed": .34
      }, {
        Tenacity: .41
      }]
    },
    WAR: {
      attributes_base: [{
        damage: 27.095
      }],
      attributes_params: [{
        Vitality: .9
      }, {
        Strength: 1
      }, {
        Determination: .387
      }, {
        "Critical Hit": .546
      }, {
        "Skill Speed": .36
      }, {
        Tenacity: .42
      }]
    },
    DRK: {
      attributes_base: [{
        damage: 26.547
      }],
      attributes_params: [{
        Vitality: .9
      }, {
        Strength: 1
      }, {
        Determination: .38
      }, {
        "Critical Hit": .53
      }, {
        "Skill Speed": .325
      }, {
        Tenacity: .4
      }]
    },
    DRG: {
      attributes_base: [{
        damage: 14.956
      }],
      attributes_params: [{
        Strength: 1
      }, {
        Determination: .148
      }, {
        "Critical Hit": .279
      }, {
        "Skill Speed": .19
      }, {
        "Direct Hit Rate": .299
      }]
    },
    MNK: {
      attributes_base: [{
        damage: 15.459
      }],
      attributes_params: [{
        Strength: 1
      }, {
        Determination: .15
      }, {
        "Critical Hit": .176
      }, {
        "Skill Speed": .143
      }, {
        "Direct Hit Rate": .159
      }]
    },
    NIN: {
      attributes_base: [{
        damage: 15.195
      }],
      attributes_params: [{
        Dexterity: 1
      }, {
        Determination: .21
      }, {
        "Critical Hit": .282
      }, {
        "Skill Speed": .161
      }, {
        "Direct Hit Rate": .302
      }]
    },
    SAM: {
      attributes_base: [{
        damage: 14.956
      }],
      attributes_params: [{
        Strength: 1
      }, {
        Determination: .207
      }, {
        "Critical Hit": .279
      }, {
        "Skill Speed": .19
      }, {
        "Direct Hit Rate": .299
      }]
    },
    BRD: {
      attributes_base: [{
        damage: 16.5
      }],
      attributes_params: [{
        Dexterity: 1
      }, {
        Determination: .13
      }, {
        "Critical Hit": .179
      }, {
        "Skill Speed": .093
      }, {
        "Direct Hit Rate": .143
      }]
    },
    MCH: {
      attributes_base: [{
        damage: 16.5
      }],
      attributes_params: [{
        Dexterity: 1
      }, {
        Determination: .13
      }, {
        "Critical Hit": .149
      }, {
        "Skill Speed": .073
      }, {
        "Direct Hit Rate": .173
      }]
    },
    BLM: {
      attributes_base: [{
        magic_damage: 11.884
      }],
      attributes_params: [{
        Intelligence: 1
      }, {
        Determination: .206
      }, {
        "Critical Hit": .256
      }, {
        "Spell Speed": .283
      }, {
        "Direct Hit Rate": .276
      }]
    },
    SMN: {
      attributes_base: [{
        magic_damage: 11.835
      }],
      attributes_params: [{
        Intelligence: 1
      }, {
        Determination: .192
      }, {
        "Critical Hit": .287
      }, {
        "Spell Speed": .195
      }, {
        "Direct Hit Rate": .297
      }]
    },
    RDM: {
      attributes_base: [{
        magic_damage: 11.884
      }],
      attributes_params: [{
        Intelligence: 1
      }, {
        Determination: .206
      }, {
        "Critical Hit": .256
      }, {
        "Spell Speed": .143
      }, {
        "Direct Hit Rate": .276
      }]
    },
    WHM: {
      attributes_base: [{
        magic_damage: 9.128
      }],
      attributes_params: [{
        Mind: 1
      }, {
        Piety: 1
      }, {
        Determination: .159
      }, {
        "Critical Hit": .182
      }, {
        "Spell Speed": .135
      }, {
        "Direct Hit Rate": .192
      }]
    },
    SCH: {
      attributes_base: [{
        magic_damage: 9.128
      }],
      attributes_params: [{
        Mind: 1
      }, {
        Piety: 1
      }, {
        Determination: .19
      }, {
        "Critical Hit": .266
      }, {
        "Spell Speed": .316
      }, {
        "Direct Hit Rate": .276
      }]
    },
    AST: {
      attributes_base: [{
        magic_damage: 6.625
      }],
      attributes_params: [{
        Mind: 1
      }, {
        Piety: 1
      }, {
        Determination: .283
      }, {
        "Critical Hit": .215
      }, {
        "Spell Speed": .24
      }, {
        "Direct Hit Rate": .225
      }]
    },
    GLA: {
      attributes_base: [{
        damage: 26.523
      }],
      attributes_params: [{
        Vitality: .9
      }, {
        Strength: 1
      }, {
        Determination: .396
      }, {
        "Critical Hit": .541
      }, {
        "Skill Speed": .34
      }, {
        Tenacity: .41
      }]
    },
    MRD: {
      attributes_base: [{
        damage: 27.095
      }],
      attributes_params: [{
        Vitality: .9
      }, {
        Strength: 1
      }, {
        Determination: .387
      }, {
        "Critical Hit": .546
      }, {
        "Skill Speed": .36
      }, {
        Tenacity: .42
      }]
    },
    LNC: {
      attributes_base: [{
        damage: 14.956
      }],
      attributes_params: [{
        Strength: 1
      }, {
        Determination: .148
      }, {
        "Critical Hit": .279
      }, {
        "Skill Speed": .19
      }, {
        "Direct Hit Rate": .299
      }]
    },
    PGL: {
      attributes_base: [{
        damage: 15.459
      }],
      attributes_params: [{
        Strength: 1
      }, {
        Determination: .15
      }, {
        "Critical Hit": .176
      }, {
        "Skill Speed": .143
      }, {
        "Direct Hit Rate": .159
      }]
    },
    ROG: {
      attributes_base: [{
        damage: 15.195
      }],
      attributes_params: [{
        Dexterity: 1
      }, {
        Determination: .21
      }, {
        "Critical Hit": .282
      }, {
        "Skill Speed": .161
      }, {
        "Direct Hit Rate": .302
      }]
    },
    ARC: {
      attributes_base: [{
        damage: 16.5
      }],
      attributes_params: [{
        Dexterity: 1
      }, {
        Determination: .13
      }, {
        "Critical Hit": .179
      }, {
        "Skill Speed": .093
      }, {
        "Direct Hit Rate": .143
      }]
    },
    THM: {
      attributes_base: [{
        magic_damage: 11.884
      }],
      attributes_params: [{
        Intelligence: 1
      }, {
        Determination: .206
      }, {
        "Critical Hit": .256
      }, {
        "Spell Speed": .283
      }, {
        "Direct Hit Rate": .276
      }]
    },
    ACN: {
      attributes_base: [{
        magic_damage: 11.835
      }],
      attributes_params: [{
        Intelligence: 1
      }, {
        Determination: .192
      }, {
        "Critical Hit": .287
      }, {
        "Spell Speed": .195
      }, {
        "Direct Hit Rate": .297
      }]
    },
    CNJ: {
      attributes_base: [{
        magic_damage: 9.128
      }],
      attributes_params: [{
        Mind: 1
      }, {
        Piety: 1
      }, {
        Determination: .159
      }, {
        "Critical Hit": .182
      }, {
        "Spell Speed": .135
      }, {
        "Direct Hit Rate": .192
      }]
    },
    BTN: {
      attributes_base: [],
      attributes_params: [{
        Gathering: 1
      }, {
        Perception: 1
      }, {
        GP: 2
      }]
    },
    MIN: {
      attributes_base: [],
      attributes_params: [{
        Gathering: 1
      }, {
        Perception: 1
      }, {
        GP: 2
      }]
    },
    FSH: {
      attributes_base: [],
      attributes_params: [{
        Gathering: 1
      }, {
        Perception: 1
      }, {
        GP: 2
      }]
    },
    CRP: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    BSM: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    ARM: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    GSM: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    LTW: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    WVR: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    ALC: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    },
    CUL: {
      attributes_base: [],
      attributes_params: [{
        Craftsmanship: 1
      }, {
        Control: 1
      }, {
        CP: 2
      }]
    }
  },
  materiaText = [{
    name: "",
    name_zh: "",
    param: "",
    paramid: ""
  }, {
    name: "Heavens' Eye Materia",
    name_zh: "神眼魔晶石 (直击)",
    param: "Direct Hit Rate",
    paramid: "DirectHitRate"
  }, {
    name: "Savage Aim Materia",
    name_zh: "武略魔晶石（暴击）",
    param: "Critical Hit",
    paramid: "CriticalHit"
  }, {
    name: "Savage Might Materia",
    name_zh: "雄略魔晶石（信念）",
    param: "Determination",
    paramid: "Determination"
  }, {
    name: "Quickarm Materia",
    name_zh: "战技魔晶石（技能速度）",
    param: "Skill Speed",
    paramid: "SkillSpeed"
  }, {
    name: "Quicktongue Materia",
    name_zh: "咏唱魔晶石（咏唱速度）",
    param: "Spell Speed",
    paramid: "SpellSpeed"
  }, {
    name: "Battledance Materia",
    name_zh: "刚柔魔晶石 (坚韧)",
    param: "Tenacity",
    paramid: "Tenacity"
  }, {
    name: "Faith Materia",
    name_zh: "信力魔晶石（信仰）",
    param: "Piety",
    paramid: "PIE"
  }, {
    name: "Strength Materia",
    name_zh: "刚力魔晶石（力量）",
    param: "Strength",
    paramid: "STR"
  }, {
    name: "Dexterity Materia",
    name_zh: "巧力魔晶石（灵巧）",
    param: "Dexterity",
    paramid: "DEX"
  }, {
    name: "Vitality Materia",
    name_zh: "耐力魔晶石（耐力）",
    param: "Vitality",
    paramid: "VIT"
  }, {
    name: "Intelligence Materia",
    name_zh: "智力魔晶石（智力）",
    param: "Intelligence",
    paramid: "INT"
  }, {
    name: "Mind Materia",
    name_zh: "意力魔晶石（精神）",
    param: "Mind",
    paramid: "MND"
  }, {
    name: "Gatherer's Guerdon Materia",
    name_zh: "达识魔晶石（获得力）",
    param: "Gathering",
    paramid: "Gathering"
  }, {
    name: "Gatherer's Guile Materia",
    name_zh: "博识魔晶石（鉴别力）",
    param: "Perception",
    paramid: "Perception"
  }, {
    name: "Gatherer's Grasp Materia",
    name_zh: "器识魔晶石（采集力）",
    param: "GP",
    paramid: "GP"
  }, {
    name: "Craftsman's Competence Materia",
    name_zh: "名匠魔晶石（作业精度）",
    param: "Craftsmanship",
    paramid: "Craftsmanship"
  }, {
    name: "Craftsman's Command Materia",
    name_zh: "巨匠魔晶石（加工精度）",
    param: "Control",
    paramid: "Control"
  }, {
    name: "Craftsman's Cunning Materia",
    name_zh: "魔匠魔晶石（制作力）",
    param: "CP",
    paramid: "CP"
  }, {
    name: "Fire Materia",
    name_zh: "创火魔晶石（火）",
    param: "Fire",
    paramid: "Fire"
  }, {
    name: "Ice Materia",
    name_zh: "创冰魔晶石（冰）",
    param: "Ice",
    paramid: "Ice"
  }, {
    name: "Wind Materia",
    name_zh: "创风魔晶石（风）",
    param: "Wind",
    paramid: "Wind"
  }, {
    name: "Earth Materia",
    name_zh: "创土魔晶石（土）",
    param: "Earth",
    paramid: "Earth"
  }, {
    name: "Lightning Materia",
    name_zh: "创雷魔晶石（雷）",
    param: "Lightning",
    paramid: "Lightning"
  }, {
    name: "Water Materia",
    name_zh: "创水魔晶石（水）",
    param: "Water",
    paramid: "Water"
  }],
  materiaValue = [
    [0, 0, 0, 0, 0, 0, 0],
    [0, 2, 4, 6, 9, 12, 40],
    [0, 2, 4, 6, 9, 12, 40],
    [0, 1, 3, 4, 6, 12, 40],
    [0, 2, 4, 6, 9, 12, 40],
    [0, 2, 4, 6, 9, 12, 40],
    [0, 2, 4, 6, 9, 12, 40],
    [0, 1, 2, 3, 6, 11, 40],
    [0, 1, 2, 4, 7, 15, 25],
    [0, 1, 2, 4, 7, 15, 25],
    [0, 1, 2, 4, 7, 15, 25],
    [0, 1, 2, 4, 7, 15, 25],
    [0, 1, 2, 4, 7, 15, 25],
    [0, 3, 4, 5, 6, 10, 15],
    [0, 3, 4, 5, 6, 10, 15],
    [0, 1, 2, 3, 4, 6, 8],
    [0, 3, 4, 5, 6, 11, 16],
    [0, 1, 2, 3, 4, 7, 10],
    [0, 1, 2, 3, 4, 6, 8],
    [0, 1, 2, 4, 6, 9, 12],
    [0, 1, 2, 4, 6, 9, 12],
    [0, 1, 2, 4, 6, 9, 12],
    [0, 1, 2, 4, 6, 9, 12],
    [0, 1, 2, 4, 6, 9, 12],
    [0, 1, 2, 4, 6, 9, 12]
  ],
  minILv = 255,
  maxILv = 270,
  classjobLv = 60,
  patchCurr = 43,
  bPartyBonus = !1,
  secondLang = "en",
  fetchDBCount = 0;
$(document).ready(function() {
  $("#ModalInit").modal("show");
  var t = null;
  initSetting(), eorzeadb.init(jQuery), $("#SelectGuardian").change(function(t) {
    guardian = $(this).val(), store.set("guardian", guardian), accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus)
  }), $("#SelectTribe").change(function(t) {
    tribe = $(this).val(), store.set("tribe", tribe), accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus)
  }), $("#SelectClassJob").change(function(t) {
    classjob = $(this).val(), store.set("classjob", classjob)
  }), $("#SelectSecondLang").change(function(t) {
    secondLang = $(this).val(), store.set("secondlang", secondLang)
  }), $("#SelectPatch").change(function(t) {
    patchCurr = parseInt($(this).val()), store.set("patchCurr", patchCurr)
  }), $("#InputLv").change(function(t) {
    var e = Number($(this).attr("min")),
      a = Number($(this).attr("max")),
      i = Math.round(Number($("#InputLv")[0].value));
    $("#InputLv")[0].value = i < e ? e : i > a ? a : i, classjobLv = $("#InputLv")[0].value, store.set("classjoblv", classjobLv)
  }), $("#InputILvMin").change(function(t) {
    var e = Number($(this).attr("min")),
      a = Number($(this).attr("max")),
      i = Math.round(Number($("#InputILvMin")[0].value));
    $("#InputILvMin")[0].value = i < e ? e : i > a ? a : i, minILv = $("#InputILvMin")[0].value, store.set("minilv", minILv)
  }), $("#InputILvMax").change(function(t) {
    var e = Number($(this).attr("min")),
      a = Number($(this).attr("max")),
      i = Math.round(Number($("#InputILvMax")[0].value));
    $("#InputILvMax")[0].value = i < e ? e : i > a ? a : i, maxILv = $("#InputILvMax")[0].value, store.set("maxilv", i)
  }), $("#ButtonSearchGear").click(function() {
    $("#ModalLoading").modal("show"), $.when(setGearILvAll(minILv, maxILv, classjob, classjobLv, iLvSep)).done(function() {
      $("#ModalLoading").modal("hide")
    })
  }), $(document).on("click", "[data-itemid]", function() {
    var t = $(this).attr("data-itemid"),
      e = $(this).attr("data-slot");
    if ("0" != t) {
      var a = $(this).attr("data-hq"),
        i = itemList[t].name_cns ? itemList[t].name_cns : itemList[t]["name_" + secondLang];
      "true" == a ? $("#Slot" + e).attr("style", "width:250px; text-align:left; background:url(/Content/Images/hq.png); background-position-x:left; background-position-y:center; background-repeat:no-repeat;") : $("#Slot" + e).attr("style", "width:250px; text-align:left;");
      var r = "true" == a ? itemList[t].icon_lodestone_hq : "";
      "" == r && (r = itemList[t].icon_lodestone), "" == (r = "" == r ? itemList[t].icon : iconUrlPrefix + r + ".png") && (r = "/Content/Images/equip_empty.png"), $("#Slot" + e).text(i).attr("data-slotitemid", ("true" == a ? "HQ" : "") + t), $("#Img" + e).attr({
        src: r,
        style: "width: 55px; height: 55px;margin-right: 5px; margin-bottom: 5px;",
        "data-href": itemUrlPrefix + itemList[t].lodestone_id + "/",
        class: "img-rounded eorzeadb_link"
      });
      for (var s = 1 == itemList[t].connect_craftable ? 5 : itemList[t].materia_slot_count, n = itemList[t].materia_slot_count, l = 1; l <= 5; l++) l <= n ? $("#Socket" + e + l.toString()).attr({
        "data-mattype": "0",
        "data-matno": "0",
        "data-mat6ok": "1",
        style: "background-position: 0px 0px;"
      }).show() : l <= s ? l == n + 1 ? $("#Socket" + e + l.toString()).attr({
        "data-mattype": "0",
        "data-matno": "0",
        "data-mat6ok": "1",
        style: "background-position: 0px 32px;"
      }).show() : $("#Socket" + e + l.toString()).attr({
        "data-mattype": "0",
        "data-matno": "0",
        "data-mat6ok": "0",
        style: "background-position: 0px 32px;"
      }).show() : $("#Socket" + e + l.toString()).attr({
        "data-mattype": "0",
        "data-matno": "0",
        "data-mat6ok": "0",
        style: "background-position: 0px 32px;"
      }).hide();
      eorzeadb.init_db_links(jQuery)
    } else {
      $("#Slot" + e).text("...").attr({
        "data-slotitemid": "0",
        style: "width:250px; text-align:left;"
      }), $("#Img" + e).attr({
        src: "/Content/Images/equip_empty.png",
        style: "width:60px;height:60px;",
        class: "img-rounded"
      }).removeAttr("data-href");
      for (l = 1; l <= 5; l++) {
        var o = "#Socket" + e + l.toString();
        $(o).hide()
      }
    }
    accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus)
  }), $("#ButtonClear").click(clearAllSlots), $("#ButtonTestLink").click(function() {
    $.getJSON("http://api.xivdb.com/item/7886", function(t) {
      "7886" == t.id ? alert("数据库连接大概率正常。但可能由于浏览器缓存的存在而实际并未连接数据库，建议手动清除浏览器缓存后重新测试。") : alert("Emmmm……遇到了未知错误。恭喜幸运的你看见了这条本不该被看见的提示信息，然鹅没有奖励。")
    }).fail(function(t, e, a) {
      alert("数据库连接异常,您可自行尝试是否能够打开页面 http://api.xivdb.com/item/7886 以确认能否从XivDB数据库获取装备数据。")
    })
  }), $(".socket").click(function() {
    t = $(this).attr("id"), $("#ModalMateria").modal({
      keyboard: !1
    })
  }), $("#ModalMateria").on("show.bs.modal", function(e) {
    var a = Number($("#" + t).attr("data-mattype")),
      i = Number($("#" + t).attr("data-matno"));
    if (a + i > 0) {
      var r = materiaText[a].name_zh + " +" + materiaValue[a][i];
      $("#SpanMateria").text(r)
    } else $("#SpanMateria").text("无")
  }), $(".materia-no").click(function() {
    var e = $(this).attr("id").split("-"),
      a = $("#" + t).attr("data-mat6ok"),
      i = $("#" + t).attr("style");
    /background-position: [0-9]+px ([0-9]+)px/.test(i);
    var r = RegExp.$1;
    if ("32" == r && 6 == e[2] && 1 != a) alert("此处不可镶嵌魔晶石陆型！");
    else {
      var s = "background-position: " + (224 - 32 * (6 == e[2] && "32" == r ? 5 : e[2])).toString() + "px " + r + "px;";
      $("#" + t).attr({
        "data-mattype": e[1],
        "data-matno": e[2],
        style: s
      }), accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus), $("#ModalMateria").modal("hide")
    }
  }), $("#ButtonMateriaClear").click(function() {
    var e = $("#" + t).attr("style");
    /background-position: [0-9]+px ([0-9]+)px/.test(e);
    var a = RegExp.$1;
    $("#" + t).attr({
      "data-mattype": "0",
      "data-matno": "0",
      style: "background-position: 0px " + a + "px;"
    }), $("#SpanMateria").text("无"), accumAttrs(classjob, classjobLv, tribe, guardian, bPartyBonus)
  })
});